package fr.elowyr.events.tasks;

import fr.elowyr.events.totems.classic.TotemManager;
import fr.elowyr.events.totems.geant.TotemGeantManager;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

public class AntiExploitTask extends BukkitRunnable {

    private final Map<String, Long> cooldowns = new HashMap<>();
    private final Location location;

    public AntiExploitTask(Object manager) {
        if (manager instanceof TotemManager) {
            this.location = ((TotemManager) manager).getLocation();
        } else {
            this.location = ((TotemGeantManager) manager).getLocation();
        }
    }

    @Override
    public void run() {
        for (Player player : this.location.getWorld().getPlayers()) {
            if (player.getWorld().equals(this.location.getWorld()) && this.location.distance(player.getLocation()) <= 15) {
                this.alertStaff(player);
            }
        }
    }

    private void alertStaff(Player player) {
        if (player.hasPermission("staff.use") || !this.canReceive(player.getName())) {
            return;
        }
        int ping = ((CraftPlayer) player).getHandle().ping;
        if (ping >= 300) {
            this.sendStaff("§6§lStaff §7§l•§f Le joueur " + player.getName() + " possède un ping élevé proche du totem ! (" + ping + "ms)");
        } else if (this.hasForbiddenEffect(player)) {
            this.sendStaff("§6§lStaff §7§l•§f Le joueur " + player.getName() + " réduit ses kb proche du totem ! (NoFire)");
        }
    }

    private boolean canReceive(String name) {
        if (this.cooldowns.containsKey(name)) {
            if (this.cooldowns.get(name) - System.currentTimeMillis() > 0) {
                return false;
            }
            this.cooldowns.replace(name, System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(5));
        } else {
            this.cooldowns.put(name, System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(5));
        }
        return true;
    }


    private boolean hasForbiddenEffect(Player player) {
        List<String> effects = player.getActivePotionEffects().stream().map(PotionEffect::getType).map(PotionEffectType::getName).collect(Collectors.toList());
        if (effects.contains("POISON")) {
            player.removePotionEffect(PotionEffectType.POISON);
        }
        return !effects.contains("FIRE_RESISTANCE");
    }

    private void sendStaff(String message) {
        Bukkit.getOnlinePlayers()
                .stream()
                //.filter(online -> online.getWorld().equals(this.location.getWorld()))
                .filter(online -> online.hasPermission("staff.use"))
                .forEach(mod -> mod.sendMessage(message));
    }
}
